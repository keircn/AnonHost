generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  DOCUMENT
  ARCHIVE
}

model User {
  id            String        @id @default(uuid())
  uid           Int           @unique @default(autoincrement())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  premium       Boolean       @default(false)
  admin         Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  settings      Settings?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  storageUsed   Int           @default(0)
  OTP           OTP[]
  Media         Media[]
  Shortlink     Shortlink[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Media {
  id           String    @id @default(dbgenerated("substring(md5(random()::text) from 1 for 6)")) @db.Char(6)
  url          String    @db.Text
  filename     String    @db.VarChar(255)
  size         Int
  width        Int?
  height       Int?
  duration     Int?
  type         MediaType @default(IMAGE)
  userId       String
  public       Boolean   @default(false)
  domain       String?   @db.VarChar(253)
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  archiveType  String?
  fileCount    Int?
  archiveMeta  Json?
}

model ApiKey {
  id        String    @id @default(uuid())
  name      String
  key       String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Settings {
  id                  String  @id @default(uuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  enableNotifications Boolean @default(true)
  makeImagesPublic    Boolean @default(false)
  enableDirectLinks   Boolean @default(true)
  customDomain        String? @db.VarChar(253)
}

model OTP {
  id        String   @id @default(uuid())
  userId    String?
  email     String
  code      String
  type      String   @default("LOGIN")
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}

model Shortlink {
  id          String    @id @default(dbgenerated("substring(md5(random()::text) from 1 for 6)")) @db.Char(6)
  uid         Int       @unique @default(autoincrement())
  originalUrl String    @db.Text
  title       String?
  userId      String
  clicks      Int       @default(0)
  public      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  expireAt    DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([originalUrl])
}

