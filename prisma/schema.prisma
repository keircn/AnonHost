generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
}

model User {
  id            BigInt    @id @default(autoincrement()) @db.BigInt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  premium       Boolean   @default(false)
  admin         Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  settings      Settings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  storageUsed   Int       @default(0)
  OTP           OTP[]
  Media         Media[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            BigInt  @db.BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       BigInt   @db.BigInt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Media {
  id        String    @id @default(cuid()) @db.Char(6)
  url       String
  filename  String
  size      Int
  width     Int
  height    Int
  duration  Int?
  type      MediaType @default(IMAGE)
  userId    BigInt    @db.BigInt
  public    Boolean   @default(false)
  domain    String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        Int       @id @default(autoincrement())
  name      String
  key       String    @unique
  userId    BigInt    @db.BigInt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Settings {
  id                  Int     @id @default(autoincrement())
  userId              BigInt  @unique @db.BigInt
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  enableNotifications Boolean @default(true)
  makeImagesPublic    Boolean @default(false)
  enableDirectLinks   Boolean @default(true)
  customDomain        String?
}

model OTP {
  id        String   @id @default(cuid())
  userId    BigInt?  @db.BigInt
  email     String
  code      String
  type      String   @default("LOGIN")
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
}
